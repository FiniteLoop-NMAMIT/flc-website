generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          String?   @default("user")
  bio           String?
  links         Json?
  isMember      Boolean   @default(false)
  isAdmin       Boolean   @default(false)
  teamId        Int?
  Team          Team?     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  accounts      Account[]
  sessions      Session[]
  Lead          Lead[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Members {
  email String  @unique
  name  String?
  batch Int?
}

model Team {
  id          Int    @id @default(autoincrement())
  name        String @unique
  description String
  Task        Task[]
  members     User[]
  Lead        Lead[]
}

model Task {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  completed   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  teamId      Int
  team        Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
}

model RegistrationPayment {
  id          Int      @id @default(autoincrement())
  userId      String
  orderId     String   @unique
  amount      Float
  paid        Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  paymentData Json?
}

model Lead {
  id     Int    @id
  user   User   @relation(fields: [userId], references: [id])
  team   Team   @relation(fields: [teamId], references: [id])
  userId String
  teamId Int
}